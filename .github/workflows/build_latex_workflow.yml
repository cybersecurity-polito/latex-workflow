name: Build LaTeX document

on:
  workflow_call:
    inputs:
      root_file:
        description: 'The root LaTeX file to compile'
        required: false
        default: 'main.tex'
        type: string
      prerelease:
        description: 'Set to true for a pre-release, false otherwise'
        required: false
        default: false
        type: boolean
    secrets:
      envPAT:
        required: true

jobs:
  build_latex:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Set up Git repository
        uses: actions/checkout@v4
        with:
          submodules: true  # Ensure submodules are checked out

      # Initialize and update submodules
      - name: Initialize and update submodules
        run: git submodule update --init --recursive

      # Compile the LaTeX document
      - name: Compile LaTeX document
        uses: xu-cheng/latex-action@v3
        with:
          root_file: ${{ inputs.root_file }}

      # Get the current date and repo name
      - name: Get the current date and repo name
        id: vars
        run: |
          echo "RELEASE_DATE=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
          echo "REPO_NAME=$(basename $GITHUB_REPOSITORY)" >> $GITHUB_ENV

      # Rename the PDF file
      - name: Rename PDF file
        run: mv main.pdf ${{ env.REPO_NAME }}_${{ env.RELEASE_DATE }}.pdf
          
      - name: Upload PDF as artifact
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v3
        with:
          name: LaTeX-build-${{ env.RELEASE_DATE }}
          path: ${{ env.REPO_NAME }}_${{ env.RELEASE_DATE }}.pdf

      # Set prerelease and release-drop flags
      - name: Set prerelease flag
        id: prerelease_flag
        run: |
          echo "PRERELEASE=${{ inputs.prerelease }}" >> $GITHUB_ENV
          if [ "${{ env.PRERELEASE }}" = "true" ]; then
            echo "RELEASE_DROP=false" >> $GITHUB_ENV
          else
            echo "RELEASE_DROP=true" >> $GITHUB_ENV
          fi

      # Create the release and upload the PDF
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        if: ${{ github.event_name != 'pull_request' }}
        with:
          prerelease: ${{ env.PRERELEASE }}
          tag_name: "v${{ env.RELEASE_DATE }}"
          files: ${{ env.REPO_NAME }}_${{ env.RELEASE_DATE }}.pdf
          token: ${{ secrets.envPAT }}

      # Delete old releases
      - name: Delete old releases
        uses: sgpublic/delete-release-action@v1.2
        if: ${{ github.event_name != 'pull_request' }}
        with:
          release-drop: ${{ env.RELEASE_DROP }} # Clean up releases only if we're not using pre-releases
          release-keep-count: 0
          release-drop-tag: true
          pre-release-drop: true
          pre-release-keep-count: 0
          pre-release-drop-tag: true
          draft-drop: true
          draft-drop-count: -1
        env:
          GITHUB_TOKEN: ${{ secrets.envPAT }}
